name: CI

on:
  push:
    branches:
      - "**"
  workflow_dispatch:

jobs:
  php-tests:
    name: CI
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        php-version: ["7.4", "8.0"]
        composer-flags: ["--prefer-lowest", "--prefer-stable"]

    steps:
      - uses: actions/checkout@v3
      - uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> "$GITHUB_OUTPUT"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Validate Composer files
        run: composer validate --ansi

      - name: Install PHP dependencies
        run: |
          composer update --prefer-dist --no-interaction --ansi ${{ matrix.composer-flags }}

      - name: Run PHP tests
        run: composer test

      - name: Run PHPCS
        run: |
          if [ "$(git diff --diff-filter=ACMR --name-only HEAD^..HEAD -- '*.php')" != "" ]; then 
            ./vendor/bin/phpcs --standard=phpcs.xml --colors --encoding=utf-8 -n -p $(git diff --diff-filter=ACMR --name-only HEAD^..HEAD -- '*.php'); 
          fi

      - name: Upload logs
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: Laravel logs
          path: storage/logs/laravel.log

  notification:
    name: Slack notification
    runs-on: ubuntu-latest
    if: always()
    needs: [php-tests]

    steps:
      - name: Send notification
        run: |
          # Steps to setup this job:
          # 1. Copy this job to your workflow file.
          # 2. Add all the jobs after which the notification must be send to `needs`.
          # 3. For sending notifications to #CI channel you're now done.
          # Optionally: Change the message `successText`, `failureText` and `cancelledText` to your needs.
          #
          # To send notification to another channel:
          # 1. Create a webhook url in the Slack app: https://api.slack.com/apps/A04DZLM3C78
          # 2. Add the URL to the repository secrets with the name `SLACK_WEBHOOK_URL`.
          # 3. Swap the `webhookUrl` variables.
          #
          webhookUrl="${{ secrets.SLACK_WEBHOOK_URL }}"
          successText=":octocat: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Build #${{ github.run_number }}> of *${{ github.repository }}@${{ github.ref_name }}* by *${{ github.actor }}* completed successfully."
          failureText=":octocat: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Build #${{ github.run_number }}> of *${{ github.repository }}@${{ github.ref_name }}* by *${{ github.actor }}* failed."
          cancelledText=":octocat: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Build #${{ github.run_number }}> of *${{ github.repository }}@${{ github.ref_name }}* by *${{ github.actor }}* was cancelled.ðŸ˜¥"
          status="${{ (contains(needs.*.result, 'cancelled') && 'cancelled') || (contains(needs.*.result, 'failure') && 'failure') || 'success' }}"

          if [ "$status" = 'success' ]; then
            color='good'
            text=$successText
          elif [ "$status" = 'failure' ]; then
            color='danger'
            text=$failureText
          elif [ "$status" = "cancelled" ]; then
            color='warning'
            text=$cancelledText
          fi

          curl "$webhookUrl" -X "POST" --header "Content-Type: application/json" \
            --data "{attachments: [{text: \"$text\", color: \"$color\"}]}"
