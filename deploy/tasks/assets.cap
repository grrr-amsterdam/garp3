desc "Build assets"
task :build_assets do
    run_locally do
        env = fetch(:stage)
        execute "./vendor/bin/g spawn --only=js --e=#{env}"
        execute "yarn && gulp --e=#{env}"
    end
end

desc "Push built assets to the webserver"
task :push_assets do
    on roles(:web) do |host|
        run_locally do
            execute "rsync rev-manifest-*.json #{host.user}@#{host.hostname}:#{release_path}"
            execute "rsync -r public/css/build/* #{host.user}@#{host.hostname}:#{release_path}"\
                "/public/css/build/"
            execute "rsync -r public/js/build/* #{host.user}@#{host.hostname}:#{release_path}"\
                "/public/js/build/"
        end
    end
end

desc "Distributing assets to CDN"
task :distribute_assets do
    run_locally do
        # Asset distribution can be disabled using `set :distribute_assets, false` in the stage's
        # rb file.
        if fetch(:distribute_assets) == false
            puts 'Distributing assets has been disabled.'
        else
            env = fetch(:stage)
            since_argument = ENV['distribute_since'] ? "--since=#{ENV['distribute_since']}" : ''
            has_12g = capture('[ -z `which "12g"` ] && echo 0 || echo 1').strip == '1'
            if not has_12g
                abort "The command 12g should be executable in order to distribute assets."
                return false
            end
            if capture("12g env get -e #{env} --var=CDN_READONLY").empty?
                execute "12g env list -e #{env} -o json | vendor/bin/g cdn distribute --e=#{env} --stdin #{since_argument}"
            else
                puts 'CDN is read-only. Not distributing.'
            end
        end
    end
end

def is_git_status_clean cap
    cap.capture('[ "`git status --porcelain | grep -c \'^.[M?]\'`" -eq "0" ] || echo 0').strip != '0'
end

def get_current_git_branch cap
    cap.capture('git rev-parse --abbrev-ref HEAD')
end

def switch_git_branch cap, branch
    cap.execute "git checkout #{branch}"
end
