desc "Build assets"
task :build_assets do
    run_locally do
        env = fetch(:stage)
        has_grunt = capture('[ -e "Gruntfile.js" ] && echo 1 || echo 0').strip == '1'
        if has_grunt
            execute "grunt #{env}"
        else
            execute "gulp --e=#{env}"
        end
    end
end

desc "Push built assets to the webserver"
task :push_assets do
    on roles(:web) do |host|
        execute "mkdir -p "\
            "#{release_path}/public/css/build/staging "\
            "#{release_path}/public/css/build/prod "\
            "#{release_path}/public/js/build/staging "\
            "#{release_path}/public/js/build/prod "

        run_locally do
            execute "scp rev-manifest-*.json #{host.user}@#{host.hostname}:#{release_path}"
            execute "scp -r public/css/build/* #{host.user}@#{host.hostname}:#{release_path}"\
                "/public/css/build/"
            execute "scp -r public/css/build/* #{host.user}@#{host.hostname}:#{release_path}"\
                "/public/css/build/"
            execute "scp -r public/js/build/* #{host.user}@#{host.hostname}:#{release_path}"\
                "/public/js/build/"
        end
    end
end

desc "Distributing assets to CDN"
task :distribute_assets do
    run_locally do
        env = fetch(:stage)
        execute "vendor/bin/g cdn distribute --to=#{env} --since=forever"
    end
end

def is_git_status_clean cap
    cap.capture('[ "`git status --porcelain | grep -c \'^.[M?]\'`" -eq "0" ] || echo 0').strip != '0'
end

def get_current_git_branch cap
    cap.capture('git rev-parse --abbrev-ref HEAD')
end

def switch_git_branch cap, branch
    cap.execute "git checkout #{branch}"
end
